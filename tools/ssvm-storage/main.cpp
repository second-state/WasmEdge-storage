// SPDX-License-Identifier: Apache-2.0
#include "common/errcode.h"
#include "common/value.h"
#include "runtime/hostfunc.h"
#include "runtime/importobj.h"
#include "runtime/instance/memory.h"
#include "storage_module.h"
#include "support/log.h"
#include "vm/configure.h"
#include "vm/vm.h"

#include <iostream>
#include <vector>

namespace SSVM {
namespace Host {

class TestPrintUUID : public Runtime::HostFunction<TestPrintUUID> {
public:
  Expect<void> body(Runtime::Instance::MemoryInstance *MemInst, uint32_t Ptr) {
    std::string UUID;
    char *Str = MemInst->getPointer<char *>(Ptr);
    std::copy_n(Str, 32, std::back_inserter(UUID));
    std::cout << "UUID: " << UUID << std::endl;
    return {};
  }
};

class TestPrintI32 : public Runtime::HostFunction<TestPrintI32> {
public:
  Expect<void> body(Runtime::Instance::MemoryInstance *MemInst, uint32_t Val) {
    std::cout << "print i32: " << Val << std::endl;
    return {};
  }
};

class TestPrintI64 : public Runtime::HostFunction<TestPrintI64> {
public:
  Expect<void> body(Runtime::Instance::MemoryInstance *MemInst, uint64_t Val) {
    std::cout << "print i64: " << Val << std::endl;
    return {};
  }
};

class TestModule : public Runtime::ImportObject {
public:
  TestModule() : ImportObject("test") {
    addHostFunc("printUUID", std::make_unique<TestPrintUUID>());
    addHostFunc("printI32", std::make_unique<TestPrintI32>());
    addHostFunc("printI64", std::make_unique<TestPrintI64>());
  }
  virtual ~TestModule() = default;
};

} // namespace Host
} // namespace SSVM

int main(int Argc, char *Argv[]) {
  SSVM::Log::setErrorLoggingLevel();

  SSVM::VM::Configure Conf;
  SSVM::VM::VM VM(Conf);

  SSVM::Host::TestModule TestMod;
  SSVM::Host::SSVMStorageModule StorageMod;
  VM.registerModule(TestMod);
  VM.registerModule(StorageMod);

  /// Test wasm.
  std::vector<uint8_t> Wasm = {
      0x00, 0x61, 0x73, 0x6D, /// WASM magic
      0x01, 0x00, 0x00, 0x00, /// WASM version
      0x01, 0x14, 0x05,       /// Type section: vec(5)
      0x60, 0x00, 0x00,       /// type0: (func)
      0x60, 0x01, 0x7F, 0x00, /// type1: (func (param i32))
      0x60, 0x01, 0x7E, 0x00, /// type2: (func (param i64))
      0x60, 0x00, 0x01, 0x7F, /// type3: (func (result i32))
      0x60, 0x00, 0x01, 0x7E, /// type4: (func (result i64))
      0x02, 0x80, 0x03, 0x0C, /// Import section: vec(12)
      0x04, 0x74, 0x65, 0x73, 0x74, 0x09, 0x70, 0x72, 0x69, 0x6E, 0x74, 0x55,
      0x55, 0x49, 0x44, 0x00, 0x01,
      /// import0: "test" "printUUID", func, type1
      0x04, 0x74, 0x65, 0x73, 0x74, 0x08, 0x70, 0x72, 0x69, 0x6E, 0x74, 0x49,
      0x33, 0x32, 0x00, 0x01,
      /// import1: "test" "printI32", func, type1
      0x04, 0x74, 0x65, 0x73, 0x74, 0x08, 0x70, 0x72, 0x69, 0x6E, 0x74, 0x49,
      0x36, 0x34, 0x00, 0x02,
      /// import2: "test" "printI64", func, type1
      0x0B, 0x73, 0x73, 0x76, 0x6D, 0x5F, 0x6E, 0x61, 0x74, 0x69, 0x76, 0x65,
      0x17, 0x73, 0x73, 0x76, 0x6D, 0x5F, 0x73, 0x74, 0x6F, 0x72, 0x61, 0x67,
      0x65, 0x5F, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x55, 0x49, 0x44,
      0x00, 0x01,
      /// import3: "ssvm_native" "ssvm_storage_createUUID", func, type1
      0x0B, 0x73, 0x73, 0x76, 0x6D, 0x5F, 0x6E, 0x61, 0x74, 0x69, 0x76, 0x65,
      0x19, 0x73, 0x73, 0x76, 0x6D, 0x5F, 0x73, 0x74, 0x6F, 0x72, 0x61, 0x67,
      0x65, 0x5F, 0x62, 0x65, 0x67, 0x69, 0x6E, 0x53, 0x74, 0x6F, 0x72, 0x65,
      0x54, 0x78, 0x00, 0x01,
      /// import4: "ssvm_native" "ssvm_storage_beginStoreTx", func, type1
      0x0B, 0x73, 0x73, 0x76, 0x6D, 0x5F, 0x6E, 0x61, 0x74, 0x69, 0x76, 0x65,
      0x18, 0x73, 0x73, 0x76, 0x6D, 0x5F, 0x73, 0x74, 0x6F, 0x72, 0x61, 0x67,
      0x65, 0x5F, 0x62, 0x65, 0x67, 0x69, 0x6E, 0x4C, 0x6F, 0x61, 0x64, 0x54,
      0x78, 0x00, 0x01,
      /// import5: "ssvm_native" "ssvm_storage_beginLoadTx", func, type1
      0x0B, 0x73, 0x73, 0x76, 0x6D, 0x5F, 0x6E, 0x61, 0x74, 0x69, 0x76, 0x65,
      0x15, 0x73, 0x73, 0x76, 0x6D, 0x5F, 0x73, 0x74, 0x6F, 0x72, 0x61, 0x67,
      0x65, 0x5F, 0x73, 0x74, 0x6F, 0x72, 0x65, 0x49, 0x33, 0x32, 0x00, 0x01,
      /// import6: "ssvm_native" "ssvm_storage_storeI32", func, type1
      0x0B, 0x73, 0x73, 0x76, 0x6D, 0x5F, 0x6E, 0x61, 0x74, 0x69, 0x76, 0x65,
      0x14, 0x73, 0x73, 0x76, 0x6D, 0x5F, 0x73, 0x74, 0x6F, 0x72, 0x61, 0x67,
      0x65, 0x5F, 0x6C, 0x6F, 0x61, 0x64, 0x49, 0x33, 0x32, 0x00, 0x03,
      /// import7: "ssvm_native" "ssvm_storage_loadI32", func, type3
      0x0B, 0x73, 0x73, 0x76, 0x6D, 0x5F, 0x6E, 0x61, 0x74, 0x69, 0x76, 0x65,
      0x15, 0x73, 0x73, 0x76, 0x6D, 0x5F, 0x73, 0x74, 0x6F, 0x72, 0x61, 0x67,
      0x65, 0x5F, 0x73, 0x74, 0x6F, 0x72, 0x65, 0x49, 0x36, 0x34, 0x00, 0x02,
      /// import8: "ssvm_native" "ssvm_storage_storeI64", func, type2
      0x0B, 0x73, 0x73, 0x76, 0x6D, 0x5F, 0x6E, 0x61, 0x74, 0x69, 0x76, 0x65,
      0x14, 0x73, 0x73, 0x76, 0x6D, 0x5F, 0x73, 0x74, 0x6F, 0x72, 0x61, 0x67,
      0x65, 0x5F, 0x6C, 0x6F, 0x61, 0x64, 0x49, 0x36, 0x34, 0x00, 0x04,
      /// import9: "ssvm_native" "ssvm_storage_loadI64", func, type4
      0x0B, 0x73, 0x73, 0x76, 0x6D, 0x5F, 0x6E, 0x61, 0x74, 0x69, 0x76, 0x65,
      0x17, 0x73, 0x73, 0x76, 0x6D, 0x5F, 0x73, 0x74, 0x6F, 0x72, 0x61, 0x67,
      0x65, 0x5F, 0x65, 0x6E, 0x64, 0x53, 0x74, 0x6F, 0x72, 0x65, 0x54, 0x78,
      0x00, 0x00,
      /// import10: "ssvm_native" "ssvm_storage_endStoreTx", func, type0
      0x0B, 0x73, 0x73, 0x76, 0x6D, 0x5F, 0x6E, 0x61, 0x74, 0x69, 0x76, 0x65,
      0x16, 0x73, 0x73, 0x76, 0x6D, 0x5F, 0x73, 0x74, 0x6F, 0x72, 0x61, 0x67,
      0x65, 0x5F, 0x65, 0x6E, 0x64, 0x4C, 0x6F, 0x61, 0x64, 0x54, 0x78, 0x00,
      0x00,
      /// import11: "ssvm_native" "ssvm_storage_endLoadTx", func, type0
      0x03, 0x02, 0x01, 0x00,       /// Func section: vec(1) = {type0}
      0x05, 0x03, 0x01, 0x00, 0x01, /// Memory section: (memory 1)
      0x07, 0x08, 0x01,             /// Export section: vec(1)
      0x04, 0x74, 0x65, 0x73, 0x74, 0x00, 0x0C, /// export0: func idx 12 "test"
      0x0A, 0x36, 0x01,                         /// Code section: vec(1)
      0x34, 0x00,                               /// func0: local{none}
      /// ------- function body -------
      /// ;; create and store UUID at memory[0]
      0x41, 0x00, /// i32.const 0
      0x10, 0x03, /// call $ssvm_native.ssvm_storage_createUUID
      /// ;; begin store with UUID address in memory: 0
      0x41, 0x00, /// i32.const 0
      0x10, 0x04, /// call $ssvm_native.ssvm_storage_beginStoreTx
      /// ;; store i32 1
      0x41, 0x01, /// i32.const 1
      0x10, 0x06, /// call $ssvm_native.ssvm_storage_storeI32
      /// ;; store i32 2
      0x41, 0x02, /// i32.const 2
      0x10, 0x06, /// call $ssvm_native.ssvm_storage_storeI32
      /// ;; store i32 3
      0x42, 0x03, /// i64.const 3
      0x10, 0x08, /// call $ssvm_native.ssvm_storage_storeI64
      /// ;; store i32 4
      0x42, 0x04, /// i64.const 4
      0x10, 0x08, /// call $ssvm_native.ssvm_storage_storeI64
      /// ;; end of store
      0x10, 0x0A, /// call $ssvm_native.ssvm_storage_endStoreTx
      /// ;; print UUID with given address in memory: 0
      0x41, 0x00, /// i32.const 0
      0x10, 0x00, /// call $test.printUUID
      /// ;; begin load with UUID address in memory: 0
      0x41, 0x00, /// i32.const 0
      0x10, 0x05, /// call $ssvm_native.ssvm_storage_beginLoadTx
      /// ;; load i32 and print: expect 1
      0x10, 0x07, /// call $ssvm_native.ssvm_storage_loadI32
      0x10, 0x01, /// call $test.printI32
      /// ;; load i32 and print: expect 2
      0x10, 0x07, /// call $ssvm_native.ssvm_storage_loadI32
      0x10, 0x01, /// call $test.printI32
      /// ;; load i64 and print: expect 3
      0x10, 0x09, /// call $ssvm_native.ssvm_storage_loadI64
      0x10, 0x02, /// call $test.printI64
      /// ;; load i64 and print: expect 4
      0x10, 0x09, /// call $ssvm_native.ssvm_storage_loadI64
      0x10, 0x02, /// call $test.printI64
      0x0B
      /// ------- function body end -------
  };

  /// Instantiate wasm to add memory instance.
  VM.loadWasm(Wasm);
  VM.validate();
  VM.instantiate();
  VM.execute("test", std::vector<SSVM::ValVariant>());

  return 0;
}
